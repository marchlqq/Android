apply plugin: 'com.android.library'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    api 'com.android.support:appcompat-v7:28.0.0'
    api 'com.android.support:design:28.0.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    api 'com.android.support.constraint:constraint-layout:1.1.3'

    implementation project(':Frameworks:largeimage')
//    api(name: 'largeimage-release', ext:'aar')

    implementation project(':Frameworks:viewPageIndicator')
    implementation project(':Frameworks:ringProgressBar')

    // implementation：只能在内部使用此模块，
    // 比如我在一个Android Libiary中使用implementation依赖了gson库，然后我的主项目依赖了Android Libiary，
    // 那么，我的主项目就无法访问gson库中的方法。使用implementation这样的好处是编译速度会加快，
    // 所以推荐使用implementation的方式去依赖，但是如果你需要提供给外部访问，那么就使用api依赖即可，
    // api完全等同于Android Studio2.x的compile依赖。
}
